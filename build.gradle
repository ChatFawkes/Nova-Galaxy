// ------------------
// START >> INIT
// ------------------

defaultTasks "cleanup", buildNovaClient, "buildNovaServer", "buildNovaConfigs"

ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

// Set build number to default if evnrionment variable does not exist.
if (System.getenv("BUILD_NUMBER") != null) {
    ext.pack_version = "${config.packVersionMajor}.${config.packVersionMinor}.${System.getenv().BUILD_NUMBER}"
}
else {
    ext.pack_version = "${config.packVersionMajor}.${config.packVersionMinor}.${config.packNonJenkinsBuild}"
}

wrapper {
    version = "1.8"
}

task cleanup(type: Delete) {
  delete 'output'
}

// ------------------------------------
// START >> BUILD NOVA GALAXY CLIENT
// ------------------------------------

task("buildNovaClient", type: Zip)
{
    description = 'Builds a Nova Galaxy client modpack zip'

    // Grab all the files that makeup a server installation.
    from('.')
	{
        include 'config/**'
        include 'mods/**'
        include 'scripts/**'
    }
    
    //copy submodule configs into config folder
    into('config') { from fileTree('Nova-Galaxy-Configs/config')}
    
    //copy submodule clientconfigs into config folder
    into('config'){ from fileTree('Nova-Galaxy-Configs/clientconfig') }
  
    //copy submodule scripts into scripts folder
    into('scripts') { from fileTree('Nova-Galaxy-Configs/scripts')}
	
    // Copy over client-only mods into mods folder.
    into('mods'){ from fileTree('clientmods') }
	
	// Do not get empty directories from which no files are included.
    includeEmptyDirs = false

    // Print out each file that we package into the client pack.
    eachFile { file -> logger.lifecycle "packing $file" }

    // Create base filename for our creation.
    baseName = "./output/${config.archivesBaseName}-$pack_version-client"

    // Log creation of client zip
    doLast { logger.lifecycle "Nova Galaxy Client Zip Archive Created: $archivePath" }
}

// ------------------------------------
// START >> BUILD NOVA GALAXY SERVER
// ------------------------------------

task("buildNovaServer", type: Zip)
{
    description = 'Builds a Nova Galaxy server modpack zip'

    // Grab all the files that makeup a server installation.
    from('.')
	{
        include 'config/**'
        include 'mods/**'
        include 'libraries/**'
        include 'scripts/**'
        include 'Server**'
        include 'ForgeS**'
    }
    
    //copy submodule configs into config folder
    into('config') { from fileTree('Nova-Galaxy-Configs/config')}
  
    //copy submodule scripts into scripts folder
    into('scripts') { from fileTree('Nova-Galaxy-Configs/scripts')}
	
    // Copy over server only mods.
    into('mods'){ from fileTree('servermods') }
	
	// Do not get empty directories from which no files are included.
    includeEmptyDirs = false

    // Print out each file that we package into the server pack.
    eachFile { file -> logger.lifecycle "packing $file" }

    // Create base filename for our creation.
    baseName = "./output/${config.archivesBaseName}-$pack_version-server"

    // Log creation of server zip
    doLast { logger.lifecycle "Nova Galaxy Server Zip Archive Created: $archivePath" }
}

// ------------------------------------
// START >> BUILD NOVA GALAXY CONFIGS
// ------------------------------------

task("buildNovaConfigs", type: Zip)
{
    description = 'Builds a Nova Galaxy config zip'
    // Grab all the files that makeup a config installation.
    from('.')
	{
        include 'config/**'
        include 'scripts/**'
    }

    //copy submodule configs into config folder
    into('config') { from fileTree('Nova-Galaxy-Configs/config')}
	
    //copy submodule clientconfigs into config folder
    into('config'){ from fileTree('Nova-Galaxy-Configs/clientconfig') }

    //copy submodule scripts into scripts folder
    into('scripts') { from fileTree('Nova-Galaxy-Configs/scripts')}
    
    // Print out each file that we package into the config zip.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/configs-${config.archivesBaseName}-$pack_version"
    
    // Log creation of configs zip
    doLast { logger.lifecycle "Nova Galaxy Configs Zip Archive Created: $archivePath" }
}
