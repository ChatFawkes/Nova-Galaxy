// ------------------
// START >> INIT
// ------------------

// Import and apply download plugin
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

apply plugin: 'de.undercouch.download'
apply plugin: 'java'

// Allow usage of values from build.properties
ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

// Define variables
def fastcraftURL = "http://files.player.to/fastcraft-${config.fastcraftVersion}.jar"
def fastcraftOutput = "build/fastcraft-${config.fastcraftVersion}.jar"
def fastcraftCleanup = "fastcraft-${config.fastcraftVersion}.jar"

// Default Task
if ( file (fastcraftOutput).isFile()) {
    defaultTasks "cleanup", "buildNovaClient", "buildNovaServer", "buildNovaConfigs"
} else {
    defaultTasks "cleanup", "downloadFastcraft", "buildNovaClient", "buildNovaServer", "buildNovaConfigs"
}

// ------------------------------------
// CLEAN UP OUTPUT DIRECTORY
// ------------------------------------

task ("cleanup", type: Delete) {
  delete fileTree(dir: "build", exclude: fastcraftCleanup)
}

// ------------------------------------
// DOWNLOAD FASTCRAFT
// ------------------------------------

import de.undercouch.gradle.tasks.download.Download

task ("downloadFastcraft", type: Download) {
    src fastcraftURL
    dest fastcraftOutput
}

// ------------------------------------
// BUILD NOVA GALAXY CLIENT
// ------------------------------------

task ("buildNovaClient", type: Zip) {
    description = 'Builds a Nova Galaxy client modpack zip'
    
    // Grab all the files that makeup a server installation.
    from('.') {
        include 'minecraft/**'
    }
    
    // Copy over all universal and client-only mods into mods folder.
    into('minecraft/mods'){ from fileTree ('mods')}
    into('minecraft/mods'){ from fileTree ('mods-client')}
    
    // Copy over fastcraft into mods folder.
    into('minecraft/mods'){ from fastcraftOutput}
    
    // Copy over all configs from submodule into config folder.
    into('minecraft/config') { from fileTree ('Nova-Galaxy-Configs/config')}
    into('minecraft/config') { from fileTree ('Nova-Galaxy-Configs/clientconfig')}
    
    // Copy over scripts from submodule into scripts folder.
    into('minecraft/scripts') { from fileTree ('Nova-Galaxy-Configs/scripts')}
    
    // Do not get empty directories from which no files are included.
    includeEmptyDirs = false

    // Print out each file that we package into the client pack.
    // eachFile { file -> logger.lifecycle "packing $file" }

    // Create base filename for our creation.
    destinationDir = file 'build'
    baseName = "./${config.archivesBaseName}-${config.packVersion}-client"

    // Log creation of client zip.
    doLast { logger.lifecycle "Nova Galaxy Client Zip Archive Created: $archivePath" }
}

// ------------------------------------
// BUILD NOVA GALAXY SERVER
// ------------------------------------

task ("buildNovaServer", type: Zip) {
    description = 'Builds a Nova Galaxy server modpack zip'

    // Grab all the files that makeup a server installation.
    from('.') {
        include 'config/**'
        include 'mods/**'
        include 'scripts/**'
    }
    
    // Copy over server only mods into mods folder.
    into('mods'){ from fileTree ('mods-server') }
    
    // Copy over fastcraft into mods folder.
    into('mods'){ from fastcraftOutput}
    
    // Copy over configs from submodule into config folder.
    into('config') { from fileTree ('Nova-Galaxy-Configs/config')}
  
    // Copy over scripts from submodule into scripts folder.
    into('scripts') { from fileTree ('Nova-Galaxy-Configs/scripts')}
    
    // Copy over server files to the archive's root.
    into('') {from fileTree ('files-server')}
    
    // Do not get empty directories from which no files are included.
    includeEmptyDirs = false

    // Print out each file that we package into the server pack.
    // eachFile { file -> logger.lifecycle "packing $file" }

    // Create base filename for our creation.
    destinationDir = file 'build'
    baseName = "./${config.archivesBaseName}-${config.packVersion}-server"

    // Log creation of server zip.
    doLast { logger.lifecycle "Nova Galaxy Server Zip Archive Created: $archivePath" }
}

// ------------------------------------
// BUILD NOVA GALAXY CONFIGS
// ------------------------------------

task ("buildNovaConfigs", type: Zip) {
    description = 'Builds a Nova Galaxy config zip'
    
    // Grab all the files that makeup a config installation.
    from('.') {
        include 'config/**'
        include 'scripts/**'
    }

    // Copy over all configs from submodule into config folder.
    into('config') { from fileTree ('Nova-Galaxy-Configs/config')}
    into('config'){ from fileTree ('Nova-Galaxy-Configs/clientconfig') }

    // Copy over scripts from submodule into scripts folder.
    into('scripts') { from fileTree ('Nova-Galaxy-Configs/scripts')}
    
    // Print out each file that we package into the config zip.
    // eachFile { file -> logger.lifecycle "packing $file" }
    
    // Create base filename for our creation.
    destinationDir = file 'build'
    baseName = "./configs-${config.archivesBaseName}-${config.packVersion}"
    
    // Log creation of configs zip
    doLast { logger.lifecycle "Nova Galaxy Configs Zip Archive Created: $archivePath" }
}
